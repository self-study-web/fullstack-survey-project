// write a function to retreive a blob of json
// in short,  make an ajax request!
// We can use fetch function available in ES2015(ES6).fetch returns a Promise
// async/await is introduced in - ES2017(ES8)

// url : https://rallycoding.herokuapp.com/api/music_albums

function fetchAlbums() {
  fetch('https://rallycoding.herokuapp.com/api/music_albums')
    .then(res => res.json())
    .then(json => console.log(json));
}
fetchAlbums();

// Identify the function which contains some type of asynchronous requests- add async
// To each of the promises add await

async function fetchAlbumswithAsync() {
  const res = await fetch('https://rallycoding.herokuapp.com/api/music_albums');
  const json = await res.json();
  console.log(json);
}
fetchAlbumswithAsync();

const fetchAlbumArrow = async () => {
  const res = await fetch('https://rallycoding.herokuapp.com/api/music_albums');
  const json = await res.json();
  console.log(json);
};

/*
Notes:
If a promise resolves normally, then await promise returns the result.But in case of a rejection 
it throws the error just if there were a throw statement at that line.
This code is
async function f() {
  await Promise.reject(new Error("Whoops!"));
}
same as:
async function f() {
  throw new Error("Whoops!");
}
n real situations the promise may take some time before it rejects. So await will wait, 
and then throw an error.
We can catch that error using try..catch, the same way as a regular throw

async function f() {

  try {
    let response = await fetch('http://no-such-url');
  } catch(err) {
    alert(err); // TypeError: failed to fetch
  }
}

f();

In case of an error, the control jumps to the catch block. We can also wrap multiple lines:

async function f() {

  try {
    let response = await fetch('/no-user-here');
    let user = await response.json();
  } catch(err) {
    // catches errors both in fetch and response.json
    alert(err);
  }
}

f();

we donâ€™t have try..catch, then the promise generated by the call of the async function f() becomes rejected.
 We can append .catch to handle it:
 async function f() {
  let response = await fetch('http://no-such-url');
}

// f() becomes a rejected promise
f().catch(alert); // TypeError: failed to fetch // (*)

*/
